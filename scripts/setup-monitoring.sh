#!/bin/bash\n\n# Monitoring Setup Script for CRM MVP\n# This script sets up comprehensive monitoring and analytics\n\nset -e\n\n# Colors for output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m' # No Color\n\n# Function to print colored output\nprint_status() {\n    echo -e \"${BLUE}[INFO]${NC} $1\"\n}\n\nprint_success() {\n    echo -e \"${GREEN}[SUCCESS]${NC} $1\"\n}\n\nprint_warning() {\n    echo -e \"${YELLOW}[WARNING]${NC} $1\"\n}\n\nprint_error() {\n    echo -e \"${RED}[ERROR]${NC} $1\"\n}\n\nprint_step() {\n    echo -e \"${BLUE}[STEP]${NC} $1\"\n}\n\n# Function to check if a command exists\ncommand_exists() {\n    command -v \"$1\" >/dev/null 2>&1\n}\n\n# Function to setup analytics\nsetup_analytics() {\n    print_step \"Setting up analytics...\"\n    \n    # Check if analytics utilities exist\n    if [ ! -f \"src/utils/analytics.ts\" ]; then\n        print_error \"Analytics utilities not found. Please ensure the project is properly set up.\"\n        exit 1\n    fi\n    \n    print_status \"Analytics utilities are configured\"\n    print_status \"To enable analytics, set the following environment variables:\"\n    print_status \"  - VITE_ENABLE_ANALYTICS=true\"\n    print_status \"  - VITE_GOOGLE_ANALYTICS_ID=your_ga_id (optional)\"\n    print_status \"  - VITE_ANALYTICS_ENDPOINT=your_custom_endpoint (optional)\"\n    \n    print_success \"Analytics setup completed\"\n}\n\n# Function to setup error tracking\nsetup_error_tracking() {\n    print_step \"Setting up error tracking...\"\n    \n    # Check if error tracking utilities exist\n    if [ ! -f \"src/utils/errorTracking.ts\" ]; then\n        print_error \"Error tracking utilities not found. Please ensure the project is properly set up.\"\n        exit 1\n    fi\n    \n    print_status \"Error tracking utilities are configured\"\n    print_status \"To enable error tracking, set the following environment variables:\"\n    print_status \"  - VITE_ENABLE_ERROR_TRACKING=true\"\n    print_status \"  - VITE_SENTRY_DSN=your_sentry_dsn (recommended)\"\n    print_status \"  - VITE_ERROR_ENDPOINT=your_custom_endpoint (optional)\"\n    \n    # Check if Sentry dependencies are installed\n    if ! npm list @sentry/browser >/dev/null 2>&1; then\n        print_warning \"Sentry browser SDK not installed. To install:\"\n        print_status \"  npm install @sentry/browser\"\n    fi\n    \n    print_success \"Error tracking setup completed\"\n}\n\n# Function to setup performance monitoring\nsetup_performance_monitoring() {\n    print_step \"Setting up performance monitoring...\"\n    \n    # Check if performance monitoring utilities exist\n    if [ ! -f \"src/utils/performance.ts\" ]; then\n        print_error \"Performance monitoring utilities not found. Please ensure the project is properly set up.\"\n        exit 1\n    fi\n    \n    print_status \"Performance monitoring utilities are configured\"\n    print_status \"To enable performance monitoring, set the following environment variables:\"\n    print_status \"  - VITE_ENABLE_PERFORMANCE_MONITORING=true\"\n    print_status \"  - VITE_PERFORMANCE_ENDPOINT=your_performance_endpoint (optional)\"\n    \n    print_success \"Performance monitoring setup completed\"\n}\n\n# Function to setup infrastructure monitoring\nsetup_infrastructure_monitoring() {\n    print_step \"Setting up infrastructure monitoring...\"\n    \n    # Check if Docker is available\n    if ! command_exists docker; then\n        print_warning \"Docker not found. Infrastructure monitoring requires Docker.\"\n        print_status \"To install Docker, visit: https://docs.docker.com/get-docker/\"\n        return 1\n    fi\n    \n    # Check if docker-compose is available\n    if ! command_exists docker-compose; then\n        print_warning \"Docker Compose not found. Some monitoring features require Docker Compose.\"\n        print_status \"To install Docker Compose, visit: https://docs.docker.com/compose/install/\"\n    fi\n    \n    # Check if monitoring configuration exists\n    if [ ! -f \"monitoring/prometheus.yml\" ]; then\n        print_error \"Prometheus configuration not found.\"\n        exit 1\n    fi\n    \n    if [ ! -f \"docker-compose.yml\" ]; then\n        print_error \"Docker Compose configuration not found.\"\n        exit 1\n    fi\n    \n    print_status \"Infrastructure monitoring configuration found\"\n    print_status \"To start monitoring stack:\"\n    print_status \"  docker-compose --profile monitoring up -d\"\n    print_status \"This will start:\"\n    print_status \"  - Prometheus (metrics collection) on port 9090\"\n    print_status \"  - Grafana (dashboards) on port 3001\"\n    \n    print_success \"Infrastructure monitoring setup completed\"\n}\n\n# Function to setup uptime monitoring\nsetup_uptime_monitoring() {\n    print_step \"Setting up uptime monitoring...\"\n    \n    print_status \"For uptime monitoring, consider using:\"\n    print_status \"  - UptimeRobot (https://uptimerobot.com/)\"\n    print_status \"  - Pingdom (https://www.pingdom.com/)\"\n    print_status \"  - StatusCake (https://www.statuscake.com/)\"\n    print_status \"  - Custom health check endpoint: /health\"\n    \n    # Create a simple health check endpoint documentation\n    cat > health-check.md << 'EOF'\n# Health Check Endpoint\n\nThe application exposes a health check endpoint at `/health` that returns:\n\n```json\n{\n  \"status\": \"healthy\",\n  \"timestamp\": \"2024-01-01T00:00:00.000Z\",\n  \"version\": \"1.0.0\",\n  \"uptime\": 3600,\n  \"checks\": {\n    \"database\": \"healthy\",\n    \"api\": \"healthy\",\n    \"memory\": \"healthy\"\n  }\n}\n```\n\n## Monitoring Endpoints\n\n- `GET /health` - Basic health check\n- `GET /health/detailed` - Detailed health information\n- `GET /metrics` - Prometheus metrics (if enabled)\n\n## Status Codes\n\n- `200` - All systems healthy\n- `503` - One or more systems unhealthy\n- `500` - Application error\nEOF\n    \n    print_success \"Health check documentation created: health-check.md\"\n    print_success \"Uptime monitoring setup completed\"\n}\n\n# Function to create monitoring dashboard\ncreate_monitoring_dashboard() {\n    print_step \"Creating monitoring dashboard...\"\n    \n    # Create a simple monitoring dashboard HTML file\n    cat > monitoring-dashboard.html << 'EOF'\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>CRM MVP Monitoring Dashboard</title>\n    <style>\n        body {\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n            margin: 0;\n            padding: 20px;\n            background-color: #f5f5f5;\n        }\n        .container {\n            max-width: 1200px;\n            margin: 0 auto;\n        }\n        .card {\n            background: white;\n            border-radius: 8px;\n            padding: 20px;\n            margin-bottom: 20px;\n            box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n        }\n        .grid {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n            gap: 20px;\n        }\n        .status {\n            display: inline-block;\n            padding: 4px 12px;\n            border-radius: 20px;\n            font-size: 12px;\n            font-weight: 600;\n        }\n        .status.healthy {\n            background-color: #d1f2eb;\n            color: #00875a;\n        }\n        .status.warning {\n            background-color: #fff3cd;\n            color: #856404;\n        }\n        .status.error {\n            background-color: #f8d7da;\n            color: #721c24;\n        }\n        h1 {\n            color: #333;\n            margin-bottom: 30px;\n        }\n        h2 {\n            color: #555;\n            margin-top: 0;\n        }\n        .metric {\n            display: flex;\n            justify-content: space-between;\n            margin-bottom: 10px;\n        }\n        .links {\n            margin-top: 20px;\n        }\n        .links a {\n            display: inline-block;\n            padding: 10px 20px;\n            background-color: #007bff;\n            color: white;\n            text-decoration: none;\n            border-radius: 5px;\n            margin-right: 10px;\n        }\n        .links a:hover {\n            background-color: #0056b3;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>CRM MVP Monitoring Dashboard</h1>\n        \n        <div class=\"grid\">\n            <div class=\"card\">\n                <h2>Application Status</h2>\n                <div class=\"metric\">\n                    <span>Application</span>\n                    <span class=\"status healthy\" id=\"app-status\">Checking...</span>\n                </div>\n                <div class=\"metric\">\n                    <span>Database</span>\n                    <span class=\"status healthy\" id=\"db-status\">Checking...</span>\n                </div>\n                <div class=\"metric\">\n                    <span>API</span>\n                    <span class=\"status healthy\" id=\"api-status\">Checking...</span>\n                </div>\n            </div>\n            \n            <div class=\"card\">\n                <h2>Performance Metrics</h2>\n                <div class=\"metric\">\n                    <span>Response Time</span>\n                    <span id=\"response-time\">Loading...</span>\n                </div>\n                <div class=\"metric\">\n                    <span>Memory Usage</span>\n                    <span id=\"memory-usage\">Loading...</span>\n                </div>\n                <div class=\"metric\">\n                    <span>CPU Usage</span>\n                    <span id=\"cpu-usage\">Loading...</span>\n                </div>\n            </div>\n            \n            <div class=\"card\">\n                <h2>Error Tracking</h2>\n                <div class=\"metric\">\n                    <span>Error Rate</span>\n                    <span id=\"error-rate\">Loading...</span>\n                </div>\n                <div class=\"metric\">\n                    <span>Last Error</span>\n                    <span id=\"last-error\">None</span>\n                </div>\n                <div class=\"metric\">\n                    <span>Total Errors (24h)</span>\n                    <span id=\"total-errors\">Loading...</span>\n                </div>\n            </div>\n            \n            <div class=\"card\">\n                <h2>Analytics</h2>\n                <div class=\"metric\">\n                    <span>Active Users</span>\n                    <span id=\"active-users\">Loading...</span>\n                </div>\n                <div class=\"metric\">\n                    <span>Page Views (24h)</span>\n                    <span id=\"page-views\">Loading...</span>\n                </div>\n                <div class=\"metric\">\n                    <span>Bounce Rate</span>\n                    <span id=\"bounce-rate\">Loading...</span>\n                </div>\n            </div>\n        </div>\n        \n        <div class=\"card\">\n            <h2>Monitoring Tools</h2>\n            <div class=\"links\">\n                <a href=\"http://localhost:9090\" target=\"_blank\">Prometheus</a>\n                <a href=\"http://localhost:3001\" target=\"_blank\">Grafana</a>\n                <a href=\"/health\" target=\"_blank\">Health Check</a>\n                <a href=\"/metrics\" target=\"_blank\">Metrics</a>\n            </div>\n        </div>\n    </div>\n    \n    <script>\n        // Mock data for demonstration\n        function updateDashboard() {\n            // Update status indicators\n            document.getElementById('app-status').textContent = 'Healthy';\n            document.getElementById('db-status').textContent = 'Healthy';\n            document.getElementById('api-status').textContent = 'Healthy';\n            \n            // Update performance metrics\n            document.getElementById('response-time').textContent = Math.floor(Math.random() * 100 + 50) + 'ms';\n            document.getElementById('memory-usage').textContent = Math.floor(Math.random() * 20 + 60) + '%';\n            document.getElementById('cpu-usage').textContent = Math.floor(Math.random() * 30 + 20) + '%';\n            \n            // Update error tracking\n            document.getElementById('error-rate').textContent = (Math.random() * 2).toFixed(2) + '%';\n            document.getElementById('total-errors').textContent = Math.floor(Math.random() * 10);\n            \n            // Update analytics\n            document.getElementById('active-users').textContent = Math.floor(Math.random() * 100 + 50);\n            document.getElementById('page-views').textContent = Math.floor(Math.random() * 1000 + 500);\n            document.getElementById('bounce-rate').textContent = Math.floor(Math.random() * 30 + 20) + '%';\n        }\n        \n        // Update dashboard every 30 seconds\n        updateDashboard();\n        setInterval(updateDashboard, 30000);\n        \n        // In a real implementation, you would fetch actual data from your monitoring APIs\n    </script>\n</body>\n</html>\nEOF\n    \n    print_success \"Monitoring dashboard created: monitoring-dashboard.html\"\n}\n\n# Function to verify monitoring setup\nverify_monitoring_setup() {\n    print_step \"Verifying monitoring setup...\"\n    \n    local success=true\n    \n    # Check analytics utilities\n    if [ ! -f \"src/utils/analytics.ts\" ]; then\n        print_error \"Analytics utilities missing\"\n        success=false\n    fi\n    \n    # Check error tracking utilities\n    if [ ! -f \"src/utils/errorTracking.ts\" ]; then\n        print_error \"Error tracking utilities missing\"\n        success=false\n    fi\n    \n    # Check performance monitoring utilities\n    if [ ! -f \"src/utils/performance.ts\" ]; then\n        print_error \"Performance monitoring utilities missing\"\n        success=false\n    fi\n    \n    # Check monitoring configuration\n    if [ ! -f \"monitoring/prometheus.yml\" ]; then\n        print_error \"Prometheus configuration missing\"\n        success=false\n    fi\n    \n    if [ ! -f \"docker-compose.yml\" ]; then\n        print_error \"Docker Compose configuration missing\"\n        success=false\n    fi\n    \n    if [ \"$success\" = true ]; then\n        print_success \"All monitoring components are properly configured\"\n    else\n        print_error \"Some monitoring components are missing or misconfigured\"\n        return 1\n    fi\n}\n\n# Function to show next steps\nshow_next_steps() {\n    print_step \"Next Steps\"\n    \n    echo \"\"\n    print_status \"1. Configure Environment Variables:\"\n    print_status \"   - Copy .env.production.example to .env.production\"\n    print_status \"   - Set analytics and monitoring environment variables\"\n    echo \"\"\n    print_status \"2. Start Infrastructure Monitoring (optional):\"\n    print_status \"   docker-compose --profile monitoring up -d\"\n    echo \"\"\n    print_status \"3. Configure External Services:\"\n    print_status \"   - Set up Google Analytics (optional)\"\n    print_status \"   - Set up Sentry for error tracking (recommended)\"\n    print_status \"   - Set up uptime monitoring service\"\n    echo \"\"\n    print_status \"4. Test Monitoring:\"\n    print_status \"   - Visit /health endpoint to test health checks\"\n    print_status \"   - Open monitoring-dashboard.html to view dashboard\"\n    print_status \"   - Check Grafana at http://localhost:3001 (if running)\"\n    echo \"\"\n    print_status \"5. Deploy with Monitoring:\"\n    print_status \"   ./scripts/deploy.sh --platform netlify --environment production\"\n    echo \"\"\n}\n\n# Main function\nmain() {\n    print_status \"Starting CRM MVP Monitoring Setup\"\n    print_status \"=================================\"\n    \n    setup_analytics\n    setup_error_tracking\n    setup_performance_monitoring\n    setup_infrastructure_monitoring\n    setup_uptime_monitoring\n    create_monitoring_dashboard\n    verify_monitoring_setup\n    \n    print_status \"=================================\"\n    print_success \"Monitoring setup completed successfully!\"\n    \n    show_next_steps\n}\n\n# Run main function\nmain"
</invoke>